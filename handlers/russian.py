from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from handlers.states import RuUserReg
from config import SUPPORT_GROUP_ID
from aiogram.fsm.context import FSMContext
from keyboards import ru_keyboards as kb

from database.crud import get_or_create_user, create_transaction

from database.models import User
from database.models import Transaction


import re
import random

from aiogram.exceptions import TelegramBadRequest

router = Router()


#### Russian Version

@router.callback_query(F.data == 'russian')
async def russian_answer(callback: CallbackQuery):
    await callback.message.delete()
    await callback.answer('')
    user = callback.from_user
    await callback.message.answer_photo(
        photo='https://i.ibb.co/hRN3HhFz/photo-2025-06-22-15-43-52.jpg', 
        caption=f'{user.first_name} –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Paybet! üéâ \n\n–ü–æ–ø–æ–ª–Ω—è–π –∏ –≤—ã–≤–æ–¥–∏ —Å–æ —Å—á—ë—Ç–∞ 1x –ë–ï–°–ü–õ–ê–¢–ù–û!üí∏‚ú®', 
        reply_markup = kb.ru_options)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞

@router.callback_query(F.data == 'ru_withdraw')
async def russian_withdraw_answer(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()

    await state.update_data(tg_id=callback.from_user.id)
    await state.update_data(type='withdraw')
    
    await callback.message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb.ru_phone_number_kb)

    await state.set_state(RuUserReg.phone)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞

@router.callback_query(F.data == 'ru_deposit')
async def russian_deposit_answer(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.answer()

    await state.update_data(tg_id=callback.from_user.id)
    await state.update_data(type='deposit')
    
    await callback.message.answer("üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb.ru_phone_number_kb)

    await state.set_state(RuUserReg.phone)
    

@router.message(RuUserReg.phone)
async def process_contact(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏")
        return

    phone_number = message.contact.phone_number

    await state.update_data(phone=phone_number)

    await message.answer(f"‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–Ω—è—Ç: `{phone_number}`", parse_mode="Markdown", reply_markup=kb.ReplyKeyboardRemove())

    await message.answer_photo(
        photo='https://i.ibb.co/vCGYXGhj/photo-2025-06-20-12-45-23.jpg', 
        caption='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID ‚¨áÔ∏è'
    )
    await state.set_state(RuUserReg.x_id)



@router.message(RuUserReg.x_id)
async def process_x_id(message: Message, state: FSMContext):

    platform_id = message.text.strip()

    if not platform_id.isdigit() or not (7 <= len(platform_id) <= 12):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ (–æ—Ç 7 –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    await state.update_data(x_id=platform_id)

    await message.answer(f"‚úÖ ID –ø—Ä–∏–Ω—è—Ç: `{platform_id}`", parse_mode="Markdown")

    await message.answer(
        "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
        "üîπ *–ú–∏–Ω.: 30 000 —Å—É–º*\n"
        "üîπ *–ú–∞–∫—Å.: 30 000 000 —Å—É–º*\n\n"
        "üî∏ –ü—Ä–∏–º–µ—Ä: `156000` (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)",
        parse_mode="Markdown"
    )

    await state.set_state(RuUserReg.amount)

@router.message(RuUserReg.amount)
async def process_amount(message: Message, state: FSMContext):
    raw_text = message.text.replace(" ", "").strip()

    data = await state.get_data()
    tg_id = message.from_user.id
    phone = str(data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"))

    await get_or_create_user(tg_id=tg_id, phone=phone)

 
    if not raw_text.isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. –ü—Ä–∏–º–µ—Ä: `156000`", parse_mode="Markdown")
        return

    amount = int(raw_text)
    if not (30_000 <= amount <= 30_000_000):
        await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 30 000 –¥–æ 30 000 000 —Å—É–º")
        return

    await state.update_data(amount=amount)
    await message.answer(f"‚úÖ –°—É–º–º–∞ –ø—Ä–∏–Ω—è—Ç–∞: `{amount}` —Å—É–º", parse_mode="Markdown")
    await message.answer(
        "üí≥ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (16 —Ü–∏—Ñ—Ä):\n\n–ü—Ä–∏–º–µ—Ä:\n`1234 5678 9012 3456`\n–ò–ª–∏\n`1234567890123456`",
        parse_mode="Markdown"
    )
    await state.set_state(RuUserReg.card_number)


async def show_summary(message: Message, state: FSMContext):
    data = await state.get_data()
    payment_number = random.randint(1000000000, 9999999999)

    x_id = data.get("x_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
    amount = data.get("amount", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    card = data.get("card", "–ù–µ —É–∫–∞–∑–∞–Ω–∞" )

    full_text = (
        f"‚ôªÔ∏è *ID –ó–∞—è–≤–∫–∏: {payment_number}*\n"
        f"üí≥ *–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {card}*\n"
        f"üÜî *–í–∞—à 1X ID: {x_id}*\n"
        f"üí∏ *–°—É–º–º–∞: {amount} —Å—É–º*\n\n"
        )
    
    if data['type'] == 'deposit':
        full_text += (
        f"‚ùóÔ∏è *–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É* üëá\n"
        f"~~~~ `9860180110103520` ~~~~\n"
        )
        full_text += "\n\n‚åõÔ∏è *–°—Ç–∞—Ç—É—Å*: –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã..."
        keyboard = kb.ru_payment_kb

    if data['type'] == 'withdraw':
        full_text += f"\n‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {data['confirm_code']}"
        full_text += "\n\n‚åõÔ∏è *–°—Ç–∞—Ç—É—Å*: –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏..."
        keyboard = kb.ru_withdraw_kb

    await message.answer(full_text,
        parse_mode = "Markdown",
        reply_markup = keyboard
    )


@router.message(RuUserReg.card_number)
async def process_card_number(message: Message, state: FSMContext):
    raw = message.text.strip()
    digits_only = raw.replace(" ", "")

    if not digits_only.isdigit() or len(digits_only) != 16:
        await message.answer("‚ùå –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä")
        return

    if not (re.fullmatch(r"\d{16}", raw) or re.fullmatch(r"(\d{4} ){3}\d{4}", raw)):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`1234 5678 9012 3456` –∏–ª–∏ `1234567890123456`", parse_mode="Markdown")
        return

    await state.update_data(card=digits_only)
    data = await state.get_data()

    if data['type'] == 'withdraw':
        await state.set_state(RuUserReg.confirm_code)
        await message.answer_photo(photo="https://i.ibb.co/W47HRyCM/photo-2025-06-21-17-00-51.jpg", caption="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞")
    else:
        await state.set_state(RuUserReg.summary)
        await show_summary(message, state)


@router.message(RuUserReg.confirm_code)
async def confirm_code(message: Message, state: FSMContext):
    code = message.text.strip()

    if not re.fullmatch(r'[A-Za-z0-9]{4}', code):
        await message.answer("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞: –±—É–∫–≤—ã –∏/–∏–ª–∏ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: dX6M). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(confirm_code=code)
    await state.set_state(RuUserReg.summary)
    await show_summary(message, state)



@router.callback_query(F.data == "ru_withdraw_done")
async def confirm_withdraw(callback: CallbackQuery, state: FSMContext):

    data = await state.get_data()
    card = data.get("card", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    x_id = data.get("x_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
    amount = data.get("amount", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    phone = str(data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"))
    user_id = data.get("tg_id")
    confirmation_code = data.get('confirm_code')
    type = data.get("type", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

    user = await get_or_create_user(tg_id = user_id, phone=phone)
    await create_transaction(user, amount=amount, x_id = x_id,  tx_type=type, verification_code=confirmation_code, card_number=card)
        
    payment_number = random.randint(1000000000, 9999999999)
    masked_card = f"{card}"

    await callback.message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞\n\n"
        f"‚ôªÔ∏è –ü–ª–∞—Ç–µ–∂ ID:  {payment_number}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: `{masked_card}`\n"
        f"üÜî 1X ID: `{x_id}`\n"
        f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `{confirmation_code}`\n"
        f"üíµ –°—É–º–º–∞: `{amount}` —Å—É–º\n\n"
        f"‚åõÔ∏è –°—Ç–∞—Ç—É—Å: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...",
        reply_markup=kb.ReplyKeyboardRemove(), parse_mode = "Markdown"
    )

    await callback.bot.send_message(
        chat_id=SUPPORT_GROUP_ID,
        text=f"üÜï –ù–æ–≤—ã–π –≤—ã–≤–æ–¥!\n\n"
             f"üí≥ –ö–∞—Ä—Ç–∞: `{masked_card}`\n"
             f"üÜî 1X ID: `{x_id}`\n"
             f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: `{confirmation_code}`\n"
             f"üíµ –°—É–º–º–∞: `{amount}` —Å—É–º\n"
             f"üî∞ ID: {payment_number}\n\n"
             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {phone} / {user_id}",
        parse_mode="Markdown",
        reply_markup=kb.ru_get_confirmation_kb(payment_number, user_id)
    )
    await callback.answer()


@router.callback_query(F.data == "ru_payment_done")
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    data = await state.get_data()
    card = data.get("card", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    x_id = data.get("x_id", "–ù–µ —É–∫–∞–∑–∞–Ω")
    amount = data.get("amount", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    phone = str(data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–∞"))
    user_id = data.get("tg_id")
    confirmation_code = data.get('confirm_code', "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    type = data.get("type", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")

    user = await get_or_create_user(user_id, phone=phone)
    await create_transaction(user, amount=amount, x_id = x_id,  tx_type=type, verification_code=confirmation_code, card_number=card)

    payment_number = random.randint(1000000000, 9999999999)
    masked_card = f"{card}"

    await callback.message.answer(
        f"‚ôªÔ∏è –ü–ª–∞—Ç–µ–∂ ID:  {payment_number}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: `{masked_card}`\n"
        f"‚åõÔ∏è –°—Ç–∞—Ç—É—Å: –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º...",
        reply_markup=kb.ru_support, parse_mode="Markdown"
    )

    await callback.bot.send_message(
        chat_id=SUPPORT_GROUP_ID,
        text=f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n\n"
             f"üí≥ –ö–∞—Ä—Ç–∞: `{masked_card}`\n"
             f"üÜî 1X ID: `{x_id}`\n"
             f"üíµ –°—É–º–º–∞: `{amount}` —Å—É–º\n"
             f"üî∞ ID: {payment_number}\n\n"
             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {phone} / {user_id}",
        parse_mode="Markdown",
        reply_markup=kb.ru_get_confirmation_kb(payment_number, user_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("ruconfirm_"))
async def admin_confirm_payment(callback: CallbackQuery, state: FSMContext):
    try:
        _, payment_number, user_id = callback.data.split('_')
        try:
            await callback.bot.send_message(
                chat_id=int(user_id),
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{payment_number} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å!"
            )
            
            await callback.message.edit_text(
                text=f"{callback.message.text}\n\n‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω**",
                parse_mode="Markdown"
            )
            
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", show_alert=True)
            
            user = await User.get(tg_id=user_id)
            tx = await Transaction.filter(user=user).order_by('-created_at').first()
            tx.status = "–û–ø–ª–∞—á–µ–Ω–æ"
            await tx.save()

        except TelegramBadRequest as e:
            if "chat not found" in str(e):
                await callback.message.edit_text(
                    text=f"{callback.message.text}\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞?)",
                    parse_mode="Markdown"
                )
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)
                raise

    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}", show_alert=True)
        raise


@router.callback_query(F.data == "go_home")
async def back_to_main(callback: CallbackQuery):
    try:
        await callback.message.delete()
        

        await callback.message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang üëá',
            reply_markup=kb.settings
        )
        
        await callback.answer()
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)   